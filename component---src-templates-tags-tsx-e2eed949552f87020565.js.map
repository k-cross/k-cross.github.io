{"version":3,"sources":["webpack:///./src/templates/tags.tsx"],"names":["Tags","props","tag","pageContext","edges","totalCount","data","allMarkdownRemark","tagData","allTagYaml","find","n","node","id","toLowerCase","lang","config","title","name","content","description","property","siteUrl","pathContext","slug","twitter","split","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","isHome","SiteHeaderBackground","backgroundImage","picture","childImageSharp","fluid","src","SiteMain","PostFeed","map","key","fields","post"],"mappings":"wOAoIeA,UA3E0BC,IAAS,YAChD,MAAMC,EAAMD,EAAME,YAAYD,IAAMD,EAAME,YAAYD,IAAM,IACtD,MAAEE,EAAF,WAASC,GAAeJ,EAAMK,KAAKC,kBACnCC,EAAUP,EAAMK,KAAKG,WAAWL,MAAMM,KAC1CC,GAAKA,EAAEC,KAAKC,GAAGC,gBAAkBZ,EAAIY,eAGvC,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,oBAAMC,KAAMC,IAAOD,OACnB,yBACGb,EADH,MACWc,IAAOC,OAElB,oBAAMC,KAAK,cAAcC,QAASX,WAASI,KAAOJ,EAAQI,KAAKQ,YAAc,KAC7E,oBAAMC,SAAS,eAAeF,QAASH,IAAOC,QAC9C,oBAAMI,SAAS,UAAUF,QAAQ,YACjC,oBAAME,SAAS,WAAWF,QAAU,GAAEjB,OAASc,IAAOC,UACtD,oBAAMI,SAAS,SAASF,QAASH,IAAOM,QAAUrB,EAAMsB,YAAYC,OACpE,oBAAMN,KAAK,eAAeC,QAAQ,wBAClC,oBAAMD,KAAK,gBAAgBC,QAAU,GAAEjB,OAASc,IAAOC,UACvD,oBAAMC,KAAK,cAAcC,QAASH,IAAOM,QAAUrB,EAAMsB,YAAYC,OACpER,IAAOS,SACN,oBACEP,KAAK,eACLC,QAAU,IAAGH,IAAOS,QAAQC,MAAM,wBAAwB,MAIhE,YAAC,IAAD,KACE,sBACEC,UAAU,sBACVC,IAAG,YAAE,CAACC,IAAYC,KAAf,KAEH,mBAAKF,IAAG,YAAE,CAACG,IAAOC,KAAV,KACN,mBAAKJ,IAAKK,KACR,YAAC,IAAD,CAASC,QAAQ,MAGrB,YAAC,IAAD,CACEN,IAAG,YAAE,CAACG,IAAOI,KAAV,IACHC,gBAAiB5B,SAAF,UAAEA,EAASI,YAAX,iBAAE,EAAeyB,eAAjB,iBAAE,EAAwBC,uBAA1B,iBAAE,EAAyCC,aAA3C,aAAE,EAAgDC,IACjEb,UAAU,0BAEV,YAAC,IAAD,CAAmBC,IAAKK,IAAON,UAAU,uBACvC,YAAC,IAAD,CAAWA,UAAU,cAAczB,GACnC,YAAC,IAAD,CAAiByB,UAAU,oBACxBnB,WAASI,KAAKQ,YACbZ,EAAQI,KAAKQ,YAEb,iDACmBf,EAAa,GAAQA,EAAF,SACpB,IAAfA,GAAoB,SACL,IAAfA,GAAoB,gBAOjC,oBAAMQ,GAAG,YAAYe,IAAG,YAAE,CAACa,IAAUV,KAAb,KACtB,mBAAKH,IAAKK,KACR,mBAAKL,IAAG,YAAE,CAACc,KAAH,KACLtC,EAAMuC,IAAI,EAAG/B,UACZ,YAAC,IAAD,CAAUgC,IAAKhC,EAAKiC,OAAOrB,KAAMsB,KAAMlC,QAK/C,YAAC,IAAD","file":"component---src-templates-tags-tsx-e2eed949552f87020565.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\nimport { FluidObject } from 'gatsby-image';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  SiteArchiveHeader,\n  ResponsiveHeaderBackground,\n  SiteHeaderBackground,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\n\ninterface TagTemplateProps {\n  pathContext: {\n    slug: string;\n  };\n  pageContext: {\n    tag: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          picture?: {\n            childImageSharp: {\n              fluid: FluidObject;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst Tags: React.FC<TagTemplateProps> = props => {\n  const tag = props.pageContext.tag ? props.pageContext.tag : '';\n  const { edges, totalCount } = props.data.allMarkdownRemark;\n  const tagData = props.data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta name=\"description\" content={tagData?.node ? tagData.node.description : ''} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + props.pathContext.slug} />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + props.pathContext.slug} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header\n          className=\"site-archive-header\"\n          css={[SiteHeader, SiteArchiveHeader]}\n        >\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n          <ResponsiveHeaderBackground\n            css={[outer, SiteHeaderBackground]}\n            backgroundImage={tagData?.node?.picture?.childImageSharp?.fluid?.src}\n            className=\"site-header-background\"\n          >\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">{tag}</SiteTitle>\n              <SiteDescription className=\"site-description\">\n                {tagData?.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && '1 post'}\n                    {totalCount === 0 && 'No posts'}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </ResponsiveHeaderBackground>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={[PostFeed]}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n          picture {\n            childImageSharp {\n              fluid(maxWidth: 3720) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            picture {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fluid(quality: 100, srcSetBreakpoints: [40, 80, 120]) {\n                      ...GatsbyImageSharpFluid\n                    }\n                  }\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}