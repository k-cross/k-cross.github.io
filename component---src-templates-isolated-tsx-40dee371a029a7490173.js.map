{"version":3,"sources":["webpack:///./src/templates/isolated.tsx"],"names":["PostTemplate","css","colors","darkmode","PostFull","NoImage","PostFullHeader","PostFullTitle","setLightness","darkgrey","PostFullImage","lightgrey","PageTemplate","props","post","data","markdownRemark","width","height","frontmatter","picture","childImageSharp","fluid","sizes","split","String","Number","aspectRatio","lang","config","title","property","content","siteUrl","pathContext","slug","src","name","twitter","className","outer","SiteNavMain","inner","isPost","id","SiteMain","style","alt","htmlAst"],"mappings":"scAsDA,MAqFMA,EAAeC,YAAH,2HAUEC,IAAOC,SAVT,OAeLC,EAAW,CAAH,sDAKRC,EAAU,CAAH,6HAWPC,EAAiB,sBAAH,mBAAG,CAAH,wSAqBdC,EAAgB,kBAAH,mBAAG,CAAH,0BAEfC,YAAa,OAAQN,IAAOO,UAFb,iIAapBC,EAAgB,sBAAH,mBAAG,CAAH,8CAGHR,IAAOS,UAHJ,kPA4CJC,UAlMmCC,IAAS,YACzD,MAAMC,EAAOD,EAAME,KAAKC,eACxB,IAAIC,EAAQ,GACRC,EAAS,GAMb,OALA,UAAIJ,EAAKK,YAAYC,eAArB,OAAI,EAA0BC,kBAC5BJ,EAAQH,EAAKK,YAAYC,QAAQC,gBAAgBC,MAAMC,MAAMC,MAAM,MAAM,GAAGA,MAAM,MAAM,GACxFN,EAASO,OAAOC,OAAOT,GAASH,EAAKK,YAAYC,QAAQC,gBAAgBC,MAAMK,cAI/E,YAAC,IAAD,KACE,YAAC,IAAD,KACE,oBAAMC,KAAMC,IAAOD,OACnB,yBAAQd,EAAKK,YAAYW,OAEzB,oBAAMC,SAAS,eAAeC,QAASH,IAAOC,QAC9C,oBAAMC,SAAS,UAAUC,QAAQ,YACjC,oBAAMD,SAAS,WAAWC,QAASlB,EAAKK,YAAYW,QACpD,oBAAMC,SAAS,SAASC,QAASH,IAAOI,QAAUpB,EAAMqB,YAAYC,QACnE,UAAArB,EAAKK,YAAYC,eAAjB,eAA0BC,kBACzB,oBACEU,SAAS,WACTC,QAAU,GAAEH,IAAOI,UAAUnB,EAAKK,YAAYC,QAAQC,gBAAgBC,MAAMc,QAIhF,oBAAMC,KAAK,eAAeL,QAAQ,wBAClC,oBAAMK,KAAK,gBAAgBL,QAASlB,EAAKK,YAAYW,QACrD,oBAAMO,KAAK,cAAcL,QAASH,IAAOI,QAAUpB,EAAMqB,YAAYC,QACpE,UAAArB,EAAKK,YAAYC,eAAjB,eAA0BC,kBACzB,oBACEgB,KAAK,gBACLL,QAAU,GAAEH,IAAOI,UAAUnB,EAAKK,YAAYC,QAAQC,gBAAgBC,MAAMc,QAG/EP,IAAOS,SACN,oBACED,KAAK,eACLL,QAAU,IAAGH,IAAOS,QAAQd,MAAM,wBAAwB,KAG7DK,IAAOS,SACN,oBACED,KAAK,kBACLL,QAAU,IAAGH,IAAOS,QAAQd,MAAM,wBAAwB,KAG7DP,GAAS,oBAAMc,SAAS,iBAAiBC,QAASf,IAClDC,GAAU,oBAAMa,SAAS,kBAAkBC,QAASd,KAEvD,YAAC,IAAD,CAASjB,IAAKD,GACZ,sBAAQuC,UAAU,eAChB,mBAAKtC,IAAG,YAAE,CAACuC,IAAOC,KAAV,KACN,mBAAKxC,IAAKyC,KACR,YAAC,IAAD,CAASC,QAAM,EAAC7B,KAAMA,EAAKK,iBAIjC,oBAAMyB,GAAG,YAAYL,UAAU,YAAYtC,IAAG,YAAE,CAAC4C,IAAUL,KAAb,KAC5C,mBAAKvC,IAAKyC,KACR,uBAASzC,IAAG,YAAE,CAACG,GAAWU,EAAKK,YAAYC,SAAWf,GAA1C,KACV,YAACC,EAAD,CAAgBiC,UAAU,oBACxB,YAAChC,EAAD,CAAegC,UAAU,mBAAmBzB,EAAKK,YAAYW,SAG9D,UAAAhB,EAAKK,YAAYC,eAAjB,eAA0BC,kBACzB,YAACX,EAAD,KACE,YAAC,IAAD,CACEoC,MAAO,CAAE5B,OAAQ,QACjBI,MAAOR,EAAKK,YAAYC,QAAQC,gBAAgBC,MAChDyB,IAAKjC,EAAKK,YAAYW,SAI5B,YAAC,IAAD,CAAakB,QAASlC,EAAKkC,aAKjC,YAAC,IAAD","file":"component---src-templates-isolated-tsx-40dee371a029a7490173.js","sourcesContent":["import { graphql } from 'gatsby';\nimport Img, { FluidObject } from 'gatsby-image';\nimport { setLightness } from 'polished';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/core';\nimport styled from '@emotion/styled';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav, { SiteNavMain } from '../components/header/SiteNav';\nimport PostContent from '../components/PostContent';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport { colors } from '../styles/colors';\nimport { inner, outer, SiteMain } from '../styles/shared';\nimport config from '../website-config';\n\ninterface PageTemplateProps {\n  pathContext: {\n    slug: string;\n  };\n  data: {\n    markdownRemark: {\n      html: string;\n      htmlAst: any;\n      timeToRead: string;\n      frontmatter: {\n        title: string;\n        picture: {\n          childImageSharp: {\n            fluid: any;\n          };\n        };\n      };\n    };\n  };\n}\n\nexport interface PageContext {\n  timeToRead: number;\n  fields: {\n    slug: string;\n  };\n  frontmatter: {\n    picture: {\n      childImageSharp: {\n        fluid: FluidObject;\n      };\n    };\n    title: string;\n  };\n}\n\nconst PageTemplate: React.FC<PageTemplateProps> = props => {\n  const post = props.data.markdownRemark;\n  let width = '';\n  let height = '';\n  if (post.frontmatter.picture?.childImageSharp) {\n    width = post.frontmatter.picture.childImageSharp.fluid.sizes.split(', ')[1].split('px')[0];\n    height = String(Number(width) / post.frontmatter.picture.childImageSharp.fluid.aspectRatio);\n  }\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{post.frontmatter.title}</title>\n\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"article\" />\n        <meta property=\"og:title\" content={post.frontmatter.title} />\n        <meta property=\"og:url\" content={config.siteUrl + props.pathContext.slug} />\n        {post.frontmatter.picture?.childImageSharp && (\n          <meta\n            property=\"og:image\"\n            content={`${config.siteUrl}${post.frontmatter.picture.childImageSharp.fluid.src}`}\n          />\n        )}\n\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={post.frontmatter.title} />\n        <meta name=\"twitter:url\" content={config.siteUrl + props.pathContext.slug} />\n        {post.frontmatter.picture?.childImageSharp && (\n          <meta\n            name=\"twitter:image\"\n            content={`${config.siteUrl}${post.frontmatter.picture.childImageSharp.fluid.src}`}\n          />\n        )}\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        {config.twitter && (\n          <meta\n            name=\"twitter:creator\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        {width && <meta property=\"og:image:width\" content={width} />}\n        {height && <meta property=\"og:image:height\" content={height} />}\n      </Helmet>\n      <Wrapper css={PostTemplate}>\n        <header className=\"site-header\">\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isPost post={post.frontmatter} />\n            </div>\n          </div>\n        </header>\n        <main id=\"site-main\" className=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <article css={[PostFull, !post.frontmatter.picture && NoImage]}>\n              <PostFullHeader className=\"post-full-header\">\n                <PostFullTitle className=\"post-full-title\">{post.frontmatter.title}</PostFullTitle>\n              </PostFullHeader>\n\n              {post.frontmatter.picture?.childImageSharp && (\n                <PostFullImage>\n                  <Img\n                    style={{ height: '100%' }}\n                    fluid={post.frontmatter.picture.childImageSharp.fluid}\n                    alt={post.frontmatter.title}\n                  />\n                </PostFullImage>\n              )}\n              <PostContent htmlAst={post.htmlAst} />\n            </article>\n          </div>\n        </main>\n\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nconst PostTemplate = css`\n  .site-main {\n    margin-top: 64px;\n    background: #fff;\n    padding-bottom: 4vw;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    .site-main {\n      /* background: var(--darkmode); */\n      background: ${colors.darkmode};\n    }\n  }\n`;\n\nexport const PostFull = css`\n  position: relative;\n  z-index: 50;\n`;\n\nexport const NoImage = css`\n  .post-full-content {\n    padding-top: 0;\n  }\n\n  .post-full-content:before,\n  .post-full-content:after {\n    display: none;\n  }\n`;\n\nexport const PostFullHeader = styled.header`\n  position: relative;\n  margin: 0 auto;\n  padding: 70px 170px 50px;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n\n  @media (max-width: 1170px) {\n    padding: 60px 11vw 50px;\n  }\n\n  @media (max-width: 800px) {\n    padding-right: 5vw;\n    padding-left: 5vw;\n  }\n\n  @media (max-width: 500px) {\n    padding: 20px 0 35px;\n  }\n`;\n\nexport const PostFullTitle = styled.h1`\n  margin: 0 0 0.2em;\n  color: ${setLightness('0.05', colors.darkgrey)};\n  @media (max-width: 500px) {\n    margin-top: 0.2em;\n    font-size: 3.3rem;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    color: rgba(255, 255, 255, 0.9);\n  }\n`;\n\nconst PostFullImage = styled.figure`\n  margin: 25px 0 50px;\n  height: 800px;\n  background: ${colors.lightgrey} center center;\n  background-size: cover;\n  border-radius: 5px;\n\n  @media (max-width: 1170px) {\n    margin: 25px -6vw 50px;\n    border-radius: 0;\n    img {\n      max-width: 1170px;\n    }\n  }\n\n  @media (max-width: 800px) {\n    height: 400px;\n  }\n  @media (max-width: 500px) {\n    margin-bottom: 4vw;\n    height: 350px;\n  }\n`;\n\nexport const query = graphql`\n  query($slug: String) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      htmlAst\n      timeToRead\n      frontmatter {\n        title\n        picture {\n          childImageSharp {\n            fluid(maxWidth: 3720) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default PageTemplate;\n"],"sourceRoot":""}