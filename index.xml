<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kurosu</title>
    <link>https://k-cross.github.io/</link>
    <description>Recent content on kurosu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Oct 2018 07:59:41 -0700</lastBuildDate>
    
	<atom:link href="https://k-cross.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Osmosis Driven Development</title>
      <link>https://k-cross.github.io/posts/osmosis/</link>
      <pubDate>Mon, 29 Oct 2018 07:59:41 -0700</pubDate>
      
      <guid>https://k-cross.github.io/posts/osmosis/</guid>
      <description>Once upon a time in a magical world where all tasks are well defined, performing task Y or implementing feature X is a simple matter of doing; In this world, only the current state of the feature needs to be communicated. A product manager could tell the sales team what engineering was capable of performing based on raw metrics and create hard deadlines, meaningful to customers. Time is used as a means to measure progress and productivity, two clear indicators that show how hard people are working.</description>
    </item>
    
    <item>
      <title>Everything You Ever Wanted to Know About Crashing</title>
      <link>https://k-cross.github.io/posts/let_it_crash/</link>
      <pubDate>Tue, 10 Jul 2018 17:16:31 -0700</pubDate>
      
      <guid>https://k-cross.github.io/posts/let_it_crash/</guid>
      <description>Being able to just crash an ill running process is awesome. No need to handle it, no need to kill -9 a pesky service because of a buggy system call handler. Just a nice old fashioned death. This comes from erlang&amp;rsquo;s let it crash philosophy. But this is about the times when dying is less than desirable.
Why should a process be able to crash and when should it? They should crash when they&amp;rsquo;re not expected to handle failure.</description>
    </item>
    
    <item>
      <title>Elixir Impressions</title>
      <link>https://k-cross.github.io/posts/elixir_impressions/</link>
      <pubDate>Sat, 07 Jul 2018 00:36:24 -0700</pubDate>
      
      <guid>https://k-cross.github.io/posts/elixir_impressions/</guid>
      <description>TLDR: Elixir is f*!#ing awesome!
I&amp;rsquo;ve had the luxury of programming with elixir for the last nine months. It&amp;rsquo;s been my first full-time experience utilizing a functional language in a non-academic setting. For those who don&amp;rsquo;t know, elixir is a new language built on top of the erlang VM. It looks similar to ruby, but behaves quite differently.
Coming from a c and python background, the language has been incredibly expressive, powerful, and different.</description>
    </item>
    
    <item>
      <title>Modus Operandi</title>
      <link>https://k-cross.github.io/purpose/</link>
      <pubDate>Thu, 05 Jul 2018 00:03:26 -0700</pubDate>
      
      <guid>https://k-cross.github.io/purpose/</guid>
      <description>This site is designed to serve as a creative outlet for topics related to philosophy, physics, mathematics, computer science and their applications. It&amp;rsquo;s aim is to encourage free thought.
The modern internet is not what it was originally envisioned to be. This is meant to serve as resistance to the normalcy and ease by which people give their data to platforms that exploit their use. Corporate clouds are the means by which third parties can restrict and control the flow of data.</description>
    </item>
    
    <item>
      <title>Ken Cross</title>
      <link>https://k-cross.github.io/about/</link>
      <pubDate>Wed, 04 Jul 2018 23:49:16 -0700</pubDate>
      
      <guid>https://k-cross.github.io/about/</guid>
      <description>I am a software engineer by trade with professional interests that span a variety of practical and academic fields, from woodworking to mathematics. As a computer scientist, the things that truly peak my interest are language and compiler design, distributed systems and algorithms. When I&amp;rsquo;m not working, I&amp;rsquo;m probably commuting. But when I&amp;rsquo;m not doing that either, I&amp;rsquo;m usually playing with my awesome daughter somewhere around mountains or beaches.
Thank you for reading!</description>
    </item>
    
    <item>
      <title>Abstractions</title>
      <link>https://k-cross.github.io/posts/abstractions/</link>
      <pubDate>Wed, 04 Jul 2018 00:06:38 -0700</pubDate>
      
      <guid>https://k-cross.github.io/posts/abstractions/</guid>
      <description>Foreword: the idea comes from Greg Young.
Correct abstractions in programming are hard to make for the future case. Often, not enough data is given at the start of a project and it&amp;rsquo;ll change in such a way that is no longer flexible with the current implementation strategy. So how then, should sustainable programs be built? Optimizing for code deletion is a large part of the answer, perhaps not a full one though.</description>
    </item>
    
  </channel>
</rss>