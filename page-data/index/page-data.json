{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"header":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#c8c8b8","images":{"fallback":{"src":"/static/61333c450e3d49c0054f6a6f26c26acd/ef396/diffuse.jpg","srcSet":"/static/61333c450e3d49c0054f6a6f26c26acd/ef396/diffuse.jpg 2000w,\n/static/61333c450e3d49c0054f6a6f26c26acd/bc421/diffuse.jpg 4000w","sizes":"2000px"},"sources":[{"srcSet":"/static/61333c450e3d49c0054f6a6f26c26acd/bb9be/diffuse.webp 2000w,\n/static/61333c450e3d49c0054f6a6f26c26acd/3bad0/diffuse.webp 4000w","type":"image/webp","sizes":"2000px"}]},"width":2000,"height":1500}}},"allMarkdownRemark":{"edges":[{"node":{"timeToRead":4,"frontmatter":{"title":"Basics: what the fork()","date":"2025-03-19T00:00:00.000Z","tags":["Basics Project","Software Engineering"]},"excerpt":"This is the third post in the Basics series.\nWhat happens when a process creates multiple processes? Operating System View There are a few…","html":"<p>This is the third post in the <em>Basics</em> series.\nWhat happens when a process creates multiple processes?</p>\n<h2>Operating System View</h2>\n<p>There are a few process specific operations but specifically we’re going to talk about <code class=\"language-text\">fork</code> and <code class=\"language-text\">execve</code> and a bit about what makes a process, a process.\nDepending on the OS, a process will contain different things but they are usually represented in memory like the following:</p>\n<p><svg aria-roledescription=\"packet\" role=\"graphics-document document\" style=\"max-width: 1026px;\" viewBox=\"0 0 1026 185\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-0\"><style>#mermaid-0{font-family:arial,sans-serif;font-size:16px;fill:#000000;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-0 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-0 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-0 .error-icon{fill:#552222;}#mermaid-0 .error-text{fill:#552222;stroke:#552222;}#mermaid-0 .edge-thickness-normal{stroke-width:1px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#666;stroke:#666;}#mermaid-0 .marker.cross{stroke:#666;}#mermaid-0 svg{font-family:arial,sans-serif;font-size:16px;}#mermaid-0 p{margin:0;}#mermaid-0 .packetByte{font-size:10px;}#mermaid-0 .packetByte.start{fill:black;}#mermaid-0 .packetByte.end{fill:black;}#mermaid-0 .packetLabel{fill:black;font-size:12px;}#mermaid-0 .packetTitle{fill:black;font-size:14px;}#mermaid-0 .packetBlock{stroke:black;stroke-width:1;fill:#efefef;}#mermaid-0 .node rect{fill:#fff;}#mermaid-0 :root{--mermaid-font-family:arial,sans-serif;}</style><g></g><g><rect class=\"packetBlock\" height=\"32\" width=\"1019\" y=\"5\" x=\"1\"></rect><text text-anchor=\"middle\" dominant-baseline=\"middle\" class=\"packetLabel\" y=\"21\" x=\"510.5\">Stack (Local Variables)</text></g><g><rect class=\"packetBlock\" height=\"32\" width=\"1019\" y=\"42\" x=\"1\"></rect><text text-anchor=\"middle\" dominant-baseline=\"middle\" class=\"packetLabel\" y=\"58\" x=\"510.5\">Heap (Dynamic Memory)</text></g><g><rect class=\"packetBlock\" height=\"32\" width=\"1019\" y=\"79\" x=\"1\"></rect><text text-anchor=\"middle\" dominant-baseline=\"middle\" class=\"packetLabel\" y=\"95\" x=\"510.5\">Data (Static and Global Variables)</text></g><g><rect class=\"packetBlock\" height=\"32\" width=\"1019\" y=\"116\" x=\"1\"></rect><text text-anchor=\"middle\" dominant-baseline=\"middle\" class=\"packetLabel\" y=\"132\" x=\"510.5\">Text (Instructions)</text></g><text class=\"packetTitle\" text-anchor=\"middle\" dominant-baseline=\"middle\" y=\"166.5\" x=\"513\">Virtual Memory</text></svg></p>\n<p>The <em>text</em> field of a process is also known as the <em>code segment</em> and is where the process’s instructions are held.\nOn top of it is the <em>data</em> field which contains, initialized and uninitialized static and global variables.\nThese are fixed memory locations that are always available to the process and never moved around.\nNext is the <em>heap</em> which contains dynamically allocated data for the process.\nDynamic memory allocation is for all data with unbounded requirements like lists, dictionaries, and strings;\nan array or a structure with deterministic memory bounds fit on the <em>stack</em>, which sits on top of the <em>heap</em>.\nIt contains a lot of information about the process like its state, local variables, and function return locations.</p>\n<p>So why am I talking about utensils? The <code class=\"language-text\">fork()</code> system call (and its variants) are the primary mechanism used to create a user process.\nA process has a lot of things attached to it and some of it gets copied, like:</p>\n<ul>\n<li>process group</li>\n<li>security credentials</li>\n<li>scheduling priority via its <em>nice</em> settings</li>\n<li>associated file descriptors</li>\n</ul>\n<p>Others get explicitly set, such as:</p>\n<ul>\n<li>zeroing out its statistics structures (resource utilization measurements)</li>\n<li>getting a new PID</li>\n<li>entry onto one of the process queues</li>\n</ul>\n<p>In Linux, it works like the following:</p>\n<blockquote>\n<p>The child inherits copies of the parent’s data, stack, and heap segments, which it may then modify independently of the parent’s copies. (The program text, which is placed in memory marked as read-only, is shared by the two processes.) The child process goes on either to execute a different set of functions in the same code as the parent, or, frequently, to use the execve() system call to load and execute an entirely new program. An execve() call destroys the existing text, data, stack, and heap segments, replacing them with new segments based on the code of the new program.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n</blockquote>\n<p>So in addition to the data attached to a process by the kernel changing, it also gets a new set of memory allocated to it.\nIn FreeBSD, it’s more interesting—<code class=\"language-text\">fork()</code> has a <em>copy-on-write</em> mechanism where it reads all the same data from the parent’s memory location but once a modification happens, that entire memory page is copied and updated strictly for the child process.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> This is ideal because the use of <code class=\"language-text\">fork()</code> often immediately follows the use of <code class=\"language-text\">execve()</code> which makes fewer copies more optimal.</p>\n<h2>Programming Language View</h2>\n<p>Regardless of programming language, using <code class=\"language-text\">libc</code> is required as its the system call interface to perform protected operations in kernel space<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> for *nix operating systems.\nThe best place to examine what’s happening is probably the system’s <em>shell</em>, which is a special type of <a href=\"https://k-cross.github.io/posts/repl\">REPL</a> baked into the OS.\nA <code class=\"language-text\">shell</code> and how it executes a command is similar to the following program:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">libc<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span>c_char<span class=\"token punctuation\">,</span> execve<span class=\"token punctuation\">,</span> fork<span class=\"token punctuation\">,</span> waitpid<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ffi<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">CString</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// fork</span>\n    <span class=\"token keyword\">unsafe</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// fork the current process at this point</span>\n        <span class=\"token keyword\">let</span> pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Child process!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// execve</span>\n            <span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token class-name\">CString</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/ls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> arg1 <span class=\"token operator\">=</span> <span class=\"token class-name\">CString</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">as_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">.</span><span class=\"token function\">as_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ptr<span class=\"token punctuation\">::</span></span><span class=\"token function\">null</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> env <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token namespace\">std<span class=\"token punctuation\">::</span>ptr<span class=\"token punctuation\">::</span></span><span class=\"token function\">null</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span>c_char<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">let</span> exit_code <span class=\"token operator\">=</span> <span class=\"token function\">execve</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">as_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">as_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">as_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Will never execute this because the program stack in the child is</span>\n            <span class=\"token comment\">// rewritten for the program replacing it which is `ls -l` here.</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Child exit status: {}\"</span><span class=\"token punctuation\">,</span> exit_code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parent process! Child PID: {}\"</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> status<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">waitpid</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> status <span class=\"token keyword\">as</span> <span class=\"token operator\">*</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Waiting from parent... Child PID: {}, Exit Status: {}\"</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First, notice the call to <code class=\"language-text\">fork()</code>—it either returns the child PID to the parent process and in the child process, it returns <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span>.\nThat same <code class=\"language-text\">fork()</code> call is copying the running system’s shell process, so the child shares the same <em>heap</em>, <em>stack</em>, <em>data</em>, and <em>text</em> memory at this point.\nThe conditional statement utilizes that fact to determine if it should then execute the new process using <code class=\"language-text\">execve()</code> or whether it should wait and report the outcome of the child process using <code class=\"language-text\">waitpid()</code>.\nThe <code class=\"language-text\">execve()</code> call replaces the process entirely with <code class=\"language-text\">ls -l</code> and the last line in that conditional branch shows how it will never be executed.\nThe parent immediately prints then waits for the child to run only to print its exit status once finished.\nThe program’s output:</p>\n<div class=\"gatsby-highlight\" data-language=\"plaintext\"><pre class=\"language-plaintext\"><code class=\"language-plaintext\">Parent process! Child PID: 429\nChild process!\ntotal 16\n-rw-r--r--@ 1 ken  staff  367 Mar 18 10:57 Cargo.lock\n-rw-r--r--@ 1 ken  staff   93 Mar 18 10:57 Cargo.toml\ndrwxr-xr-x@ 3 ken  staff   96 Mar 18 10:58 src\ndrwxr-xr-x@ 5 ken  staff  160 Mar 18 10:58 target\nWaiting from parent... Child PID: 429, Exit Status: 0</code></pre></div>\n<p>Notice the output and how it goes from parent -> child -> parent due to the wait and also notice how it never executes the line below <code class=\"language-text\">execve()</code>.\nThat’s it, thanks for reading!</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">The Linux Programming Interface by Kerrisk, Michael<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-2\"><a href=\"https://dl.acm.org/doi/10.5555/2659919\">The Design and Implementation of the FreeBSD Operating System, 2nd Edition</a><a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-3\"><a href=\"https://wiki.gentoo.org/wiki/Libc\">Gentoo LibC documentation</a><a href=\"#fnref-3\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is the third post in the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Basics"}]},{"type":"text","value":" series.\nWhat happens when a process creates multiple processes?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Operating System View"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are a few process specific operations but specifically we’re going to talk about "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fork"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"execve"}]},{"type":"text","value":" and a bit about what makes a process, a process.\nDepending on the OS, a process will contain different things but they are usually represented in memory like the following:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"svg","properties":{"ariaRoleDescription":["packet"],"role":"graphics-document document","style":"max-width: 1026px;","viewBox":"0 0 1026 185","xmlns":"http://www.w3.org/2000/svg","width":"100%","id":"mermaid-0"},"children":[{"type":"element","tagName":"style","properties":{},"children":[{"type":"text","value":"#mermaid-0{font-family:arial,sans-serif;font-size:16px;fill:#000000;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-0 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-0 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-0 .error-icon{fill:#552222;}#mermaid-0 .error-text{fill:#552222;stroke:#552222;}#mermaid-0 .edge-thickness-normal{stroke-width:1px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#666;stroke:#666;}#mermaid-0 .marker.cross{stroke:#666;}#mermaid-0 svg{font-family:arial,sans-serif;font-size:16px;}#mermaid-0 p{margin:0;}#mermaid-0 .packetByte{font-size:10px;}#mermaid-0 .packetByte.start{fill:black;}#mermaid-0 .packetByte.end{fill:black;}#mermaid-0 .packetLabel{fill:black;font-size:12px;}#mermaid-0 .packetTitle{fill:black;font-size:14px;}#mermaid-0 .packetBlock{stroke:black;stroke-width:1;fill:#efefef;}#mermaid-0 .node rect{fill:#fff;}#mermaid-0 :root{--mermaid-font-family:arial,sans-serif;}"}]},{"type":"element","tagName":"g","properties":{},"children":[]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"rect","properties":{"className":["packetBlock"],"height":32,"width":1019,"y":"5","x":"1"},"children":[]},{"type":"element","tagName":"text","properties":{"textAnchor":"middle","dominantBaseline":"middle","className":["packetLabel"],"y":"21","x":"510.5"},"children":[{"type":"text","value":"Stack (Local Variables)"}]}]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"rect","properties":{"className":["packetBlock"],"height":32,"width":1019,"y":"42","x":"1"},"children":[]},{"type":"element","tagName":"text","properties":{"textAnchor":"middle","dominantBaseline":"middle","className":["packetLabel"],"y":"58","x":"510.5"},"children":[{"type":"text","value":"Heap (Dynamic Memory)"}]}]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"rect","properties":{"className":["packetBlock"],"height":32,"width":1019,"y":"79","x":"1"},"children":[]},{"type":"element","tagName":"text","properties":{"textAnchor":"middle","dominantBaseline":"middle","className":["packetLabel"],"y":"95","x":"510.5"},"children":[{"type":"text","value":"Data (Static and Global Variables)"}]}]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"rect","properties":{"className":["packetBlock"],"height":32,"width":1019,"y":"116","x":"1"},"children":[]},{"type":"element","tagName":"text","properties":{"textAnchor":"middle","dominantBaseline":"middle","className":["packetLabel"],"y":"132","x":"510.5"},"children":[{"type":"text","value":"Text (Instructions)"}]}]},{"type":"element","tagName":"text","properties":{"className":["packetTitle"],"textAnchor":"middle","dominantBaseline":"middle","y":"166.5","x":"513"},"children":[{"type":"text","value":"Virtual Memory"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"text"}]},{"type":"text","value":" field of a process is also known as the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"code segment"}]},{"type":"text","value":" and is where the process’s instructions are held.\nOn top of it is the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" field which contains, initialized and uninitialized static and global variables.\nThese are fixed memory locations that are always available to the process and never moved around.\nNext is the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"heap"}]},{"type":"text","value":" which contains dynamically allocated data for the process.\nDynamic memory allocation is for all data with unbounded requirements like lists, dictionaries, and strings;\nan array or a structure with deterministic memory bounds fit on the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"stack"}]},{"type":"text","value":", which sits on top of the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"heap"}]},{"type":"text","value":".\nIt contains a lot of information about the process like its state, local variables, and function return locations."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So why am I talking about utensils? The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fork()"}]},{"type":"text","value":" system call (and its variants) are the primary mechanism used to create a user process.\nA process has a lot of things attached to it and some of it gets copied, like:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"process group"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"security credentials"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"scheduling priority via its "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"nice"}]},{"type":"text","value":" settings"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"associated file descriptors"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Others get explicitly set, such as:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"zeroing out its statistics structures (resource utilization measurements)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"getting a new PID"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"entry onto one of the process queues"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Linux, it works like the following:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The child inherits copies of the parent’s data, stack, and heap segments, which it may then modify independently of the parent’s copies. (The program text, which is placed in memory marked as read-only, is shared by the two processes.) The child process goes on either to execute a different set of functions in the same code as the parent, or, frequently, to use the execve() system call to load and execute an entirely new program. An execve() call destroys the existing text, data, stack, and heap segments, replacing them with new segments based on the code of the new program."},{"type":"element","tagName":"sup","properties":{"id":"fnref-1"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-1","className":["footnote-ref"]},"children":[{"type":"text","value":"1"}]}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So in addition to the data attached to a process by the kernel changing, it also gets a new set of memory allocated to it.\nIn FreeBSD, it’s more interesting—"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fork()"}]},{"type":"text","value":" has a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"copy-on-write"}]},{"type":"text","value":" mechanism where it reads all the same data from the parent’s memory location but once a modification happens, that entire memory page is copied and updated strictly for the child process."},{"type":"element","tagName":"sup","properties":{"id":"fnref-2"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-2","className":["footnote-ref"]},"children":[{"type":"text","value":"2"}]}]},{"type":"text","value":" This is ideal because the use of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fork()"}]},{"type":"text","value":" often immediately follows the use of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"execve()"}]},{"type":"text","value":" which makes fewer copies more optimal."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Programming Language View"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Regardless of programming language, using "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"libc"}]},{"type":"text","value":" is required as its the system call interface to perform protected operations in kernel space"},{"type":"element","tagName":"sup","properties":{"id":"fnref-3"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fn-3","className":["footnote-ref"]},"children":[{"type":"text","value":"3"}]}]},{"type":"text","value":" for *nix operating systems.\nThe best place to examine what’s happening is probably the system’s "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"shell"}]},{"type":"text","value":", which is a special type of "},{"type":"element","tagName":"a","properties":{"href":"https://k-cross.github.io/posts/repl"},"children":[{"type":"text","value":"REPL"}]},{"type":"text","value":" baked into the OS.\nA "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"shell"}]},{"type":"text","value":" and how it executes a command is similar to the following program:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"rust"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-rust"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rust"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"use"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","namespace"]},"children":[{"type":"text","value":"libc"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"::"}]}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"c_char"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" execve"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" fork"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" waitpid"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"use"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","namespace"]},"children":[{"type":"text","value":"std"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":"ffi"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"::"}]}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"CString"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"fn"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function-definition","function"]},"children":[{"type":"text","value":"main"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"// fork"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"unsafe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"// fork the current process at this point"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"let"}]},{"type":"text","value":" pid "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"fork"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" pid "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","macro","property"]},"children":[{"type":"text","value":"println!"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Child process!\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n            "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"// execve"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"let"}]},{"type":"text","value":" path "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"CString"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"::"}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"new"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"/bin/ls\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"unwrap"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"let"}]},{"type":"text","value":" arg1 "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"CString"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"::"}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"new"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"-l\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"unwrap"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"let"}]},{"type":"text","value":" args "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"text","value":"path"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"as_ptr"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" arg1"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"as_ptr"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","namespace"]},"children":[{"type":"text","value":"std"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":"ptr"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"::"}]}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"null"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"let"}]},{"type":"text","value":" env "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","namespace"]},"children":[{"type":"text","value":"std"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":"ptr"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"::"}]}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"null"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"::"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"c_char"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"let"}]},{"type":"text","value":" exit_code "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"execve"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"path"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"as_ptr"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" args"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"as_ptr"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" env"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"as_ptr"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"// Will never execute this because the program stack in the child is"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"// rewritten for the program replacing it which is `ls -l` here."}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","macro","property"]},"children":[{"type":"text","value":"println!"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Child exit status: {}\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" exit_code"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","macro","property"]},"children":[{"type":"text","value":"println!"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Parent process! Child PID: {}\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" pid"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"let"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"mut"}]},{"type":"text","value":" status"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"i32"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"waitpid"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"pid"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"&"}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"mut"}]},{"type":"text","value":" status "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"as"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"mut"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"i32"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","macro","property"]},"children":[{"type":"text","value":"println!"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Waiting from parent... Child PID: {}, Exit Status: {}\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" pid"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" status"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First, notice the call to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fork()"}]},{"type":"text","value":"—it either returns the child PID to the parent process and in the child process, it returns "},{"type":"element","tagName":"span","properties":{"className":["math","math-inline"]},"children":[{"type":"element","tagName":"span","properties":{"className":["katex"]},"children":[{"type":"element","tagName":"span","properties":{"className":["katex-mathml"]},"children":[{"type":"element","tagName":"math","properties":{"xmlns":"http://www.w3.org/1998/Math/MathML"},"children":[{"type":"element","tagName":"semantics","properties":{},"children":[{"type":"element","tagName":"mrow","properties":{},"children":[{"type":"element","tagName":"mn","properties":{},"children":[{"type":"text","value":"0"}]}]},{"type":"element","tagName":"annotation","properties":{"encoding":"application/x-tex"},"children":[{"type":"text","value":"0"}]}]}]}]},{"type":"element","tagName":"span","properties":{"className":["katex-html"],"ariaHidden":"true"},"children":[{"type":"element","tagName":"span","properties":{"className":["base"]},"children":[{"type":"element","tagName":"span","properties":{"className":["strut"],"style":"height:0.6444em;"},"children":[]},{"type":"element","tagName":"span","properties":{"className":["mord"]},"children":[{"type":"text","value":"0"}]}]}]}]}]},{"type":"text","value":".\nThat same "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fork()"}]},{"type":"text","value":" call is copying the running system’s shell process, so the child shares the same "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"heap"}]},{"type":"text","value":", "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"stack"}]},{"type":"text","value":", "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"data"}]},{"type":"text","value":", and "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"text"}]},{"type":"text","value":" memory at this point.\nThe conditional statement utilizes that fact to determine if it should then execute the new process using "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"execve()"}]},{"type":"text","value":" or whether it should wait and report the outcome of the child process using "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"waitpid()"}]},{"type":"text","value":".\nThe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"execve()"}]},{"type":"text","value":" call replaces the process entirely with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ls -l"}]},{"type":"text","value":" and the last line in that conditional branch shows how it will never be executed.\nThe parent immediately prints then waits for the child to run only to print its exit status once finished.\nThe program’s output:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"plaintext"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-plaintext"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-plaintext"]},"children":[{"type":"text","value":"Parent process! Child PID: 429\nChild process!\ntotal 16\n-rw-r--r--@ 1 ken  staff  367 Mar 18 10:57 Cargo.lock\n-rw-r--r--@ 1 ken  staff   93 Mar 18 10:57 Cargo.toml\ndrwxr-xr-x@ 3 ken  staff   96 Mar 18 10:58 src\ndrwxr-xr-x@ 5 ken  staff  160 Mar 18 10:58 target\nWaiting from parent... Child PID: 429, Exit Status: 0"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice the output and how it goes from parent -> child -> parent due to the wait and also notice how it never executes the line below "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"execve()"}]},{"type":"text","value":".\nThat’s it, thanks for reading!"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["footnotes"]},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-1"},"children":[{"type":"text","value":"The Linux Programming Interface by Kerrisk, Michael"},{"type":"element","tagName":"a","properties":{"href":"#fnref-1","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-2"},"children":[{"type":"element","tagName":"a","properties":{"href":"https://dl.acm.org/doi/10.5555/2659919"},"children":[{"type":"text","value":"The Design and Implementation of the FreeBSD Operating System, 2nd Edition"}]},{"type":"element","tagName":"a","properties":{"href":"#fnref-2","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{"id":"fn-3"},"children":[{"type":"element","tagName":"a","properties":{"href":"https://wiki.gentoo.org/wiki/Libc"},"children":[{"type":"text","value":"Gentoo LibC documentation"}]},{"type":"element","tagName":"a","properties":{"href":"#fnref-3","className":["footnote-backref"]},"children":[{"type":"text","value":"↩"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"fields":{"layout":"post","slug":"/posts/fork/"}}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}