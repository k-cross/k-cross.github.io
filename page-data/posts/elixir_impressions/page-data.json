{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/elixir_impressions/","result":{"data":{"markdownRemark":{"html":"<p>I’ve had the luxury of programming with <em>elixir</em> for the last nine months.\nIt’s been my first full-time experience utilizing a functional language in a non-academic setting.\n<em>Elixir</em> is a new language built on top of <em>erlang</em>.\nIt looks similar to <em>ruby</em> but the semantics are quite different.</p>\n<p>Coming from a <em>c</em> and <em>python</em> background, the language has been expressive, powerful, and refreshingly different.\nIts tooling makes it a pleasurable experience to work with and easy to get started on any new project.\nBut the real fun comes from the language itself.\nParallel, concurrent and distributed programming semantics are top notch and built directly into the language or provided by standard libraries.\nHave one process that needs to talk to another? Just create a simple <code class=\"language-text\">GenServer</code>.\nNeed to create a K/V store? There’s <code class=\"language-text\">ETS</code>.\nDoes that store need to be available across multiple nodes and persist? There’s <code class=\"language-text\">mnesia</code>.</p>\n<p>There are so many good solutions that are readily available to access with minimal effort.\nMost modern web applications utilize these tools, yet most languages only think about these requirements as afterthoughts.\nApplications can scale without the immediate and common constraints of other languages, making it easier for startups to focus on the problem domain.\nIt’s less common to need specialized solutions like <code class=\"language-text\">redis</code> or <code class=\"language-text\">kafka</code> since similar tooling’s baked into <em>elixir</em> already.\nIn many cases, the language tooling is the desired approach because the application can be built around business logic rather than infrastructure choices, creating less operational burdens.\nIt also is closer to the business logic in a natural way which is less common in other languages trying to respect domain boundaries.\nThere are still times when reaching for an external tool is required and the libraries that wrap common tools to be consumed in the language are either really good and well supported or completely lacking.\nSince <em>erlang</em> is in the picture, it’s really easy to natively call and use <em>erlang</em> libraries directly making the language far more mature in tooling than most at a similar age.</p>\n<p>The language is also infinitely flexible as it includes <em>macros</em>, a form of <em>metaprogramming</em>, by which the language can be extended by anyone.\nTired of writing the same boiler-plate code over and over? Write a macro!\nThe amount of thought that goes into the everyday usage of the language is also nice, since there’s a fresh take on doing things the <code class=\"language-text\">erlang</code> way.\nCase in point is the <code class=\"language-text\">with</code> statement, its inclusion wasn’t necessary but certainly makes simple patterns much easier to deal with and manage.</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">error_tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:error</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"function isn't fun\"</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Before `with`</span>\n<span class=\"token keyword\">case</span> <span class=\"token function\">fun_fun_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">}</span> <span class=\"token operator\">-></span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">fun_function</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n      <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> val2<span class=\"token punctuation\">}</span> <span class=\"token operator\">-></span> <span class=\"token function\">do_stuff_with</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> val2<span class=\"token punctuation\">)</span>\n      _ <span class=\"token operator\">-></span> error_tuple\n    <span class=\"token keyword\">end</span>\n  _ <span class=\"token operator\">-></span>\n    error_tuple\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># Afer `with`</span>\nwith <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;-</span> <span class=\"token function\">fun_fun_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> val2<span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;-</span> <span class=\"token function\">fun_function</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  <span class=\"token function\">do_stuff_with</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> val2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span>\n  _ <span class=\"token operator\">-></span> error_tuple\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>That’s far easier to grok both syntactically and by length.\nThe <code class=\"language-text\">with</code> implementation is just a macro that expands into nested <code class=\"language-text\">case</code> statements under the hood.\nIt’s possible to keep this looking pretty by making function wrappers for case statements, but that’s essentially what <code class=\"language-text\">with</code> does in a generic way already.\nUsing the <code class=\"language-text\">with</code> statement is elegant for long chains of validation statements, making the code’s intent clear.</p>\n<p>Personally, the benefits of <em>elixir</em> extend beyond code.\nIt’s allowed me to fully switch into the mindset of functional programming.\nIt’s opened an entirely new paradigm of problem solving tools that have been mostly better than their OOP alternatives.</p>\n<p>All things considered, <em>elixir</em> is an amazing language with great tooling built on top of the incredibly reliable <em>BEAM</em>.\nThe community is also very welcoming and friendly.\nIf you’re looking for a new language or skill to pick up, I urge you to try <em>elixir</em>.\nIt is a great way to expand your knowledge base and understanding of a variety of topics.</p>\n<h2>Updates for 2020</h2>\n<p>I’m still using <em>elixir</em> in 2020 and it’s still an amazing language.\nThe tooling keeps improving and the community is getting larger which means the packages available are also increasing.\nUtilizing the actor model allowed our programs to run very reliably with minimal issue, while maximizing the ability to parallel process requests at a granular level.\nA similar workload and application that was written in <em>PHP</em> and serves less overall traffic requires upwards of 20 AWS instances.\nContrasting that to our current <em>elixir</em> application, our maximum autoscale group now reaches 4 AWS instances, all of which are smaller and cheaper instance types by comparison.\nUsing <em>elixir</em> actively saves money on <em>operational expenses</em> because it utilizes resources effectively.</p>\n<p>One caveat, I mentioned in the past about using <code class=\"language-text\">mnesia</code> and hinted at using <code class=\"language-text\">distributed erlang</code>.\nEach of those tools can work but they are specialized and should probably be avoided.\nDistributed computation is a hard problem and these tools were built with different use cases than the modern web.\nKnowing what the trade-offs are is invaluable since there are probably better options available for distributed computation.\nThis will probably change over time but as of today I cannot in good conscience recommend the out-of-box tooling for this.</p>\n<p>The language is still great for a large variety of use cases and there many things that make it a joy to work with.\nThe actor model is baked into the language itself and feels like it belongs directly in the language itself, unlike many actor frameworks in other languages.\nAt the end of the day, its possible to make any language work for the problem at hand.\nFor the majority of non-computationally heavy workloads, <em>elixir</em> still remains my goto language, even in a distributed computing world!</p>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I’ve had the luxury of programming with "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"elixir"}]},{"type":"text","value":" for the last nine months.\nIt’s been my first full-time experience utilizing a functional language in a non-academic setting.\n"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Elixir"}]},{"type":"text","value":" is a new language built on top of "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"erlang"}]},{"type":"text","value":".\nIt looks similar to "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"ruby"}]},{"type":"text","value":" but the semantics are quite different."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Coming from a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"c"}]},{"type":"text","value":" and "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"python"}]},{"type":"text","value":" background, the language has been expressive, powerful, and refreshingly different.\nIts tooling makes it a pleasurable experience to work with and easy to get started on any new project.\nBut the real fun comes from the language itself.\nParallel, concurrent and distributed programming semantics are top notch and built directly into the language or provided by standard libraries.\nHave one process that needs to talk to another? Just create a simple "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"GenServer"}]},{"type":"text","value":".\nNeed to create a K/V store? There’s "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ETS"}]},{"type":"text","value":".\nDoes that store need to be available across multiple nodes and persist? There’s "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"mnesia"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are so many good solutions that are readily available to access with minimal effort.\nMost modern web applications utilize these tools, yet most languages only think about these requirements as afterthoughts.\nApplications can scale without the immediate and common constraints of other languages, making it easier for startups to focus on the problem domain.\nIt’s less common to need specialized solutions like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"redis"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"kafka"}]},{"type":"text","value":" since similar tooling’s baked into "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"elixir"}]},{"type":"text","value":" already.\nIn many cases, the language tooling is the desired approach because the application can be built around business logic rather than infrastructure choices, creating less operational burdens.\nIt also is closer to the business logic in a natural way which is less common in other languages trying to respect domain boundaries.\nThere are still times when reaching for an external tool is required and the libraries that wrap common tools to be consumed in the language are either really good and well supported or completely lacking.\nSince "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"erlang"}]},{"type":"text","value":" is in the picture, it’s really easy to natively call and use "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"erlang"}]},{"type":"text","value":" libraries directly making the language far more mature in tooling than most at a similar age."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The language is also infinitely flexible as it includes "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"macros"}]},{"type":"text","value":", a form of "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"metaprogramming"}]},{"type":"text","value":", by which the language can be extended by anyone.\nTired of writing the same boiler-plate code over and over? Write a macro!\nThe amount of thought that goes into the everyday usage of the language is also nice, since there’s a fresh take on doing things the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"erlang"}]},{"type":"text","value":" way.\nCase in point is the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"with"}]},{"type":"text","value":" statement, its inclusion wasn’t necessary but certainly makes simple patterns much easier to deal with and manage."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"elixir"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-elixir"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-elixir"]},"children":[{"type":"text","value":"error_tuple "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"element","tagName":"span","properties":{"className":["token","atom","symbol"]},"children":[{"type":"text","value":":error"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"function isn't fun\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Before `with`"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"case"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"fun_fun_function"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"do"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"element","tagName":"span","properties":{"className":["token","atom","symbol"]},"children":[{"type":"text","value":":ok"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" val"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"case"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"fun_function"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"val"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"do"}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"element","tagName":"span","properties":{"className":["token","atom","symbol"]},"children":[{"type":"text","value":":ok"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" val2"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"do_stuff_with"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"val"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" val2"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n      _ "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" error_tuple\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"end"}]},{"type":"text","value":"\n  _ "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":"\n    error_tuple\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"end"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Afer `with`"}]},{"type":"text","value":"\nwith "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"element","tagName":"span","properties":{"className":["token","atom","symbol"]},"children":[{"type":"text","value":":ok"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" val"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<-"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"fun_fun_function"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n     "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"element","tagName":"span","properties":{"className":["token","atom","symbol"]},"children":[{"type":"text","value":":ok"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" val2"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<-"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"fun_function"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"val"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"do"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"do_stuff_with"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"val"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" val2"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":"\n  _ "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" error_tuple\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"end"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"That’s far easier to grok both syntactically and by length.\nThe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"with"}]},{"type":"text","value":" implementation is just a macro that expands into nested "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"case"}]},{"type":"text","value":" statements under the hood.\nIt’s possible to keep this looking pretty by making function wrappers for case statements, but that’s essentially what "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"with"}]},{"type":"text","value":" does in a generic way already.\nUsing the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"with"}]},{"type":"text","value":" statement is elegant for long chains of validation statements, making the code’s intent clear."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Personally, the benefits of "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"elixir"}]},{"type":"text","value":" extend beyond code.\nIt’s allowed me to fully switch into the mindset of functional programming.\nIt’s opened an entirely new paradigm of problem solving tools that have been mostly better than their OOP alternatives."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All things considered, "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"elixir"}]},{"type":"text","value":" is an amazing language with great tooling built on top of the incredibly reliable "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"BEAM"}]},{"type":"text","value":".\nThe community is also very welcoming and friendly.\nIf you’re looking for a new language or skill to pick up, I urge you to try "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"elixir"}]},{"type":"text","value":".\nIt is a great way to expand your knowledge base and understanding of a variety of topics."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Updates for 2020"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I’m still using "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"elixir"}]},{"type":"text","value":" in 2020 and it’s still an amazing language.\nThe tooling keeps improving and the community is getting larger which means the packages available are also increasing.\nUtilizing the actor model allowed our programs to run very reliably with minimal issue, while maximizing the ability to parallel process requests at a granular level.\nA similar workload and application that was written in "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"PHP"}]},{"type":"text","value":" and serves less overall traffic requires upwards of 20 AWS instances.\nContrasting that to our current "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"elixir"}]},{"type":"text","value":" application, our maximum autoscale group now reaches 4 AWS instances, all of which are smaller and cheaper instance types by comparison.\nUsing "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"elixir"}]},{"type":"text","value":" actively saves money on "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"operational expenses"}]},{"type":"text","value":" because it utilizes resources effectively."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"One caveat, I mentioned in the past about using "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"mnesia"}]},{"type":"text","value":" and hinted at using "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"distributed erlang"}]},{"type":"text","value":".\nEach of those tools can work but they are specialized and should probably be avoided.\nDistributed computation is a hard problem and these tools were built with different use cases than the modern web.\nKnowing what the trade-offs are is invaluable since there are probably better options available for distributed computation.\nThis will probably change over time but as of today I cannot in good conscience recommend the out-of-box tooling for this."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The language is still great for a large variety of use cases and there many things that make it a joy to work with.\nThe actor model is baked into the language itself and feels like it belongs directly in the language itself, unlike many actor frameworks in other languages.\nAt the end of the day, its possible to make any language work for the problem at hand.\nFor the majority of non-computationally heavy workloads, "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"elixir"}]},{"type":"text","value":" still remains my goto language, even in a distributed computing world!"}]}],"data":{"quirksMode":false}},"excerpt":"I’ve had the luxury of programming with elixir for the last nine months.\nIt’s been my first full-time experience utilizing a functional…","timeToRead":4,"frontmatter":{"title":"Elixir Impressions","userDate":"7 July 2018","date":"2018-07-07T00:00:00.000Z","modified":null,"tags":["Opinion","Software Engineering"],"excerpt":"TLDR: Elixir is awesome!!!","picture":null,"author":[{"yamlId":"Ken Cross","bio":"Software Engineer","avatar":{"children":[{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#182828","images":{"fallback":{"src":"/static/7ffe238930a689e103d70f234bb00199/17f8a/ghost.png","srcSet":"/static/7ffe238930a689e103d70f234bb00199/17f8a/ghost.png 400w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/7ffe238930a689e103d70f234bb00199/5fb52/ghost.webp 400w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":400}}]}}]}},"relatedPosts":{"totalCount":4,"edges":[{"node":{"id":"02507f3e-38df-5e9b-a196-ae83e2ef4c44","timeToRead":6,"excerpt":"There is no shortage of tools and depending on when you’ve started your career, you have opinions on which ones are the best. The tools we…","frontmatter":{"title":"Tools","date":"2025-01-09T00:00:00.000Z","modified":"2025-01-09T00:00:00.000Z"},"fields":{"slug":"/posts/tools/"}}},{"node":{"id":"8ff027c0-6b7d-56d3-859c-197089b79e1d","timeToRead":9,"excerpt":"Chances are you have experienced working with someone that devours joy in anything at some point. It’s easy to avoid their foulness except…","frontmatter":{"title":"Toxic Wastelands","date":"2024-12-13T00:00:00.000Z","modified":"2024-12-16T00:00:00.000Z"},"fields":{"slug":"/posts/toxic/"}}},{"node":{"id":"d00b5604-98d2-540a-a927-462e0dc51281","timeToRead":4,"excerpt":"In a magical world where all tasks are well defined, performing task  or implement feature  is a simple matter of doing.\nIn this world only…","frontmatter":{"title":"Osmosis Driven Development","date":"2018-10-29T00:00:00.000Z","modified":"2020-08-08T00:00:00.000Z"},"fields":{"slug":"/posts/osmosis/"}}},{"node":{"id":"ca635f1b-6384-5143-8242-193da0965893","timeToRead":4,"excerpt":"I’ve had the luxury of programming with elixir for the last nine months.\nIt’s been my first full-time experience utilizing a functional…","frontmatter":{"title":"Elixir Impressions","date":"2018-07-07T00:00:00.000Z","modified":null},"fields":{"slug":"/posts/elixir_impressions/"}}}]}},"pageContext":{"slug":"/posts/elixir_impressions/","prev":null,"next":{"excerpt":"In a magical world where all tasks are well defined, performing task  or implement feature  is a simple matter of doing.\nIn this world only…","timeToRead":4,"frontmatter":{"title":"Osmosis Driven Development","tags":["Opinion","Software Engineering"],"date":"2018-10-29T00:00:00.000Z","draft":false,"excerpt":"How context drives the engineering process","picture":null,"author":[{"yamlId":"Ken Cross","bio":"Software Engineer","avatar":{"children":[{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#182828","images":{"fallback":{"src":"/static/7ffe238930a689e103d70f234bb00199/17f8a/ghost.png","srcSet":"/static/7ffe238930a689e103d70f234bb00199/17f8a/ghost.png 400w","sizes":"(min-width: 400px) 400px, 100vw"},"sources":[{"srcSet":"/static/7ffe238930a689e103d70f234bb00199/5fb52/ghost.webp 400w","type":"image/webp","sizes":"(min-width: 400px) 400px, 100vw"}]},"width":400,"height":400}}]}}]},"fields":{"layout":"post","slug":"/posts/osmosis/"}},"primaryTag":"Opinion"}},"staticQueryHashes":[],"slicesMap":{}}