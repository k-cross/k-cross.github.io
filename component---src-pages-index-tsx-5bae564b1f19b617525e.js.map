{"version":3,"sources":["webpack:///./src/pages/index.tsx"],"names":["MainPage","props","width","height","data","header","childImageSharp","fixed","lang","config","title","name","content","description","property","siteUrl","src","googleSiteVerification","twitter","split","toString","css","outer","SiteHeader","SiteHeaderStyles","className","style","backgroundImage","inner","isHome","id","SiteMain","Posts","PostFeed","allMarkdownRemark","edges","map","post","index","key","node","fields","slug","PostFull","frontmatter","tags","length","to","htmlAst"],"mappings":"sRAyJeA,UA9HgCC,IAC7C,MAAM,MAAEC,EAAF,OAASC,GAAWF,EAAMG,KAAKC,OAAOC,gBAAgBC,MAE5D,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,oBAAMC,KAAMC,IAAOD,OACnB,yBAAQC,IAAOC,OACf,oBAAMC,KAAK,cAAcC,QAASH,IAAOI,cACzC,oBAAMC,SAAS,eAAeF,QAASH,IAAOC,QAC9C,oBAAMI,SAAS,UAAUF,QAAQ,YACjC,oBAAME,SAAS,WAAWF,QAASH,IAAOC,QAC1C,oBAAMI,SAAS,iBAAiBF,QAASH,IAAOI,cAChD,oBAAMC,SAAS,SAASF,QAASH,IAAOM,UACxC,oBACED,SAAS,WACTF,QAAU,GAAEH,IAAOM,UAAUd,EAAMG,KAAKC,OAAOC,gBAAgBC,MAAMS,QAEtEP,IAAOQ,wBACN,oBAAMN,KAAK,2BAA2BC,QAASH,IAAOQ,yBAExD,oBAAMN,KAAK,eAAeC,QAAQ,wBAClC,oBAAMD,KAAK,gBAAgBC,QAASH,IAAOC,QAC3C,oBAAMC,KAAK,sBAAsBC,QAASH,IAAOI,cACjD,oBAAMF,KAAK,cAAcC,QAASH,IAAOM,UACzC,oBACEJ,KAAK,gBACLC,QAAU,GAAEH,IAAOM,UAAUd,EAAMG,KAAKC,OAAOC,gBAAgBC,MAAMS,QAEtEP,IAAOS,SACN,oBACEP,KAAK,eACLC,QAAU,IAAGH,IAAOS,QAAQC,MAAM,wBAAwB,KAG9D,oBAAML,SAAS,iBAAiBF,QAASV,EAAMkB,aAC/C,oBAAMN,SAAS,kBAAkBF,QAAST,EAAOiB,cAEnD,YAAC,IAAD,KACE,mBACEC,IAAG,YAAE,CAACC,IAAOC,IAAYC,KAAtB,IACHC,UAAU,yBACVC,MAAO,CACLC,gBAAkB,QAAO1B,EAAMG,KAAKC,OAAOC,gBAAgBC,MAAMS,UAGnE,mBAAKK,IAAKO,KACR,YAAC,IAAD,CAASC,QAAM,IACf,YAAC,IAAD,CAAmBJ,UAAU,sBAC3B,YAAC,IAAD,CAAWA,UAAU,cAEjBhB,IAAOC,OAGX,YAAC,IAAD,KAAkBD,IAAOI,gBAI/B,oBAAMiB,GAAG,YAAYT,IAAG,YAAE,CAACU,IAAUT,KAAb,KACtB,mBAAKD,IAAG,YAAE,CAACO,IAAOI,KAAV,KACN,mBAAKX,IAAG,YAAE,CAACY,KAAH,KACLhC,EAAMG,KAAK8B,kBAAkBC,MAAMC,IAAI,CAACC,EAAMC,IAE3C,uBAASC,IAAKF,EAAKG,KAAKC,OAAOC,KAAMrB,IAAG,YAAE,CAACsB,YAAH,KACtC,YAAC,iBAAD,CAAgBlB,UAAU,oBACxB,YAAC,eAAD,CAAcA,UAAU,kBACrBY,EAAKG,KAAKI,YAAYC,MAAQR,EAAKG,KAAKI,YAAYC,KAAKC,OAAS,GACjE,YAAC,IAAD,CAAMC,GAAK,SAAQ,IAAYV,EAAKG,KAAKI,YAAYC,KAAK,QACvDR,EAAKG,KAAKI,YAAYC,KAAK,KAIlC,YAAC,gBAAD,CAAepB,UAAU,mBACtBY,EAAKG,KAAKI,YAAYlC,QAG3B,YAAC,IAAD,CAAasC,QAASX,EAAKG,KAAKQ,eAO5C,YAAC,IAAD","file":"component---src-pages-index-tsx-5bae564b1f19b617525e.js","sourcesContent":["import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport { Helmet } from 'react-helmet';\nimport * as _ from 'lodash';\n\nimport SiteNav from '../components/header/SiteNav';\nimport PostContent from '../components/PostContent';\nimport { Wrapper } from '../components/Wrapper';\nimport { Footer } from '../components/Footer';\nimport IndexLayout from '../layouts';\nimport { PostFull, PostFullHeader, PostFullTags, PostFullTitle } from '../templates/post';\nimport {\n  inner,\n  outer,\n  Posts,\n  PostFeed,\n  SiteMain,\n  SiteTitle,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteHeaderStyles,\n} from '../styles/shared';\nimport config from '../website-config';\n\nimport 'katex/dist/katex.min.css';\n\nconst MainPage: React.FC<IndexTemplateProps> = props => {\n  const { width, height } = props.data.header.childImageSharp.fixed;\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta\n          property=\"og:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta\n          name=\"twitter:image\"\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fixed.src}`}\n        />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width.toString()} />\n        <meta property=\"og:image:height\" content={height.toString()} />\n      </Helmet>\n      <Wrapper>\n        <div\n          css={[outer, SiteHeader, SiteHeaderStyles]}\n          className=\"site-header-background\"\n          style={{\n            backgroundImage: `url('${props.data.header.childImageSharp.fixed.src}')`,\n          }}\n        >\n          <div css={inner}>\n            <SiteNav isHome />\n            <SiteHeaderContent className=\"site-header-conent\">\n              <SiteTitle className=\"site-title\">\n                {(\n                  config.title\n                )}\n              </SiteTitle>\n              <SiteDescription>{config.description}</SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </div>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={[inner, Posts]}>\n            <div css={[PostFeed]}>\n              {props.data.allMarkdownRemark.edges.map((post, index) => {\n                return (\n                  <article key={post.node.fields.slug} css={[PostFull]}>\n                    <PostFullHeader className=\"post-full-header\">\n                      <PostFullTags className=\"post-full-tags\">\n                        {post.node.frontmatter.tags && post.node.frontmatter.tags.length > 0 && (\n                          <Link to={`/tags/${_.kebabCase(post.node.frontmatter.tags[0])}/`}>\n                            {post.node.frontmatter.tags[0]}\n                          </Link>\n                        )}\n                      </PostFullTags>\n                      <PostFullTitle className=\"post-full-title\">\n                        {post.node.frontmatter.title}\n                      </PostFullTitle>\n                    </PostFullHeader>\n                    <PostContent htmlAst={post.node.htmlAst} />\n                  </article>\n                );\n              })}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    header: file(relativePath: { eq: \"img/moma/diffuse.jpg\" }) {\n      childImageSharp {\n        # Specify the image processing specifications right in the query.\n        # Makes it trivial to update as your page's design changes.\n        fixed(width: 2000, quality: 100) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 1\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true }, layout: { eq: \"post\" } } }\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date\n            tags\n          }\n          excerpt\n          html\n          htmlAst\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default MainPage;\n"],"sourceRoot":""}